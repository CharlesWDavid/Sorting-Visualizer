{"version":3,"sources":["SortingAlgorithms/sortingAlgorithms.js","SortingVisualizer/SortingVisualizer.jsx","App.js","serviceWorker.js","index.js"],"names":["array_length","getMergeSortAnimations","array","animations","length","auxiliaryArray","slice","mergeSortHelper","mainArray","startIdx","endIdx","middleIdx","Math","floor","k","i","j","push","doMerge","getQuickSortAnimations","quickSortHelper","leftIdx","rightIdx","index","pivot","helperSwap","partition","maxHeap","max","idx1","idx2","tmp","SortingVisualizer","props","state","this","resetArray","min","random","setState","arrayBars","document","getElementsByClassName","barOneIdx","barTwoIdx","barOneStyle","style","barTwoStyle","color","setTimeout","backgroundColor","newHeight","height","sorted","getBubbleSortAnimations","barOneHeight","barTwoHeight","getHeapSortAnimations","Navbar","expand","variant","bg","Container","Brand","href","Nav","className","Toggle","aria-controls","Link","onClick","quickSort","mergeSort","heapSort","bubbleSort","ref","myRef","map","value","idx","key","React","Component","App","Boolean","window","location","hostname","match","ReactDOM","render","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"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","file":"static/js/main.c2af1cfc.chunk.js","sourcesContent":["\n// ############# BUBBLESORT ################\n\nexport function getBubbleSortAnimations(array){\n    const animations = [];\n    let sorted = false;\n    while(!sorted){\n        sorted = true;\n        for (let i=0; i<array.length-1; i++){\n            animations.push([i, i+1]);\n            animations.push([i, i+1]);\n            if (array[i] > array[i+1]){\n                animations.push([i, array[i], i+1, array[i+1], true]);\n                helperSwap(array, i, i+1);\n                sorted = false;\n            } else {\n                animations.push([i, array[i], i+1, array[i+1], false]);\n            }\n        }\n    }\n    return animations;\n}\n\n// ############# MERGESORT ################\n\nexport function getMergeSortAnimations(array) {\n    const animations = [];\n    if (array.length <= 1) return array;\n    const auxiliaryArray = array.slice();\n    mergeSortHelper(array, 0, array.length - 1, auxiliaryArray, animations);\n    return animations;\n}\n\nfunction mergeSortHelper(mainArray, startIdx, endIdx, auxiliaryArray, animations) {\n    if (startIdx === endIdx) return;\n    const middleIdx = Math.floor((startIdx + endIdx) / 2);\n    mergeSortHelper(auxiliaryArray, startIdx, middleIdx, mainArray, animations);\n    mergeSortHelper(auxiliaryArray, middleIdx + 1, endIdx, mainArray, animations);\n    doMerge(mainArray, startIdx, middleIdx, endIdx, auxiliaryArray, animations);\n}\n\nfunction doMerge(mainArray, startIdx, middleIdx, endIdx, auxiliaryArray, animations){\n    let k = startIdx;\n    let i = startIdx;\n    let j = middleIdx + 1;\n    while (i <= middleIdx && j <= endIdx) {\n        animations.push([i, j]);\n        animations.push([i, j]);\n        if (auxiliaryArray[i] <= auxiliaryArray[j]) {\n        animations.push([k, auxiliaryArray[i]]);\n        mainArray[k++] = auxiliaryArray[i++];\n        } else {\n        animations.push([k, auxiliaryArray[j]]);\n        mainArray[k++] = auxiliaryArray[j++];\n        }\n    }\n    while (i <= middleIdx) {\n        animations.push([i, i]);\n        animations.push([i, i]);\n        animations.push([k, auxiliaryArray[i]]);\n        mainArray[k++] = auxiliaryArray[i++];\n    }\n    while (j <= endIdx) {\n        animations.push([j, j]);\n        animations.push([j, j]);\n        animations.push([k, auxiliaryArray[j]]);\n        mainArray[k++] = auxiliaryArray[j++];\n    }\n}\n\n// ############# QUICKSORT ################ \n\nexport function getQuickSortAnimations(array){\n    const animations = [];\n    if (array.length <= 1) return array;\n    quickSortHelper(array, 0, array.length-1, animations);\n    return animations;\n}\n\nfunction quickSortHelper(array, leftIdx, rightIdx, animations){\n    if(array.length > 1){\n        let index = partition(array, leftIdx, rightIdx, animations);\n        if (leftIdx < index - 1){\n            quickSortHelper(array, leftIdx, index-1, animations);\n        }\n        if (index < rightIdx){\n            quickSortHelper(array, index, rightIdx, animations);\n        }\n    }\n}\n\nfunction partition(array, leftIdx, rightIdx, animations){\n    let pivot = array[Math.floor((rightIdx + leftIdx) / 2)],\n        i     = leftIdx, \n        j     = rightIdx;\n\n    while (i <= j){\n        while (array[i] < pivot) i++;\n        while (array[j] > pivot) j--;\n        animations.push([i,j]);\n        animations.push([i,j]);\n        if (i <= j){\n            animations.push([i, array[i], j, array[j], true]);\n            helperSwap(array, i, j);\n            i++;\n            j--;\n        } else {\n            animations.push([i, array[i], j, array[j], false]);\n        }\n    }\n    return i;\n}\n\n// ############# HEAP SORT ################\n\nvar array_length;\nexport function getHeapSortAnimations(array){\n    const animations = [];\n    array_length = array.length;\n\n    for (let i=Math.floor(array_length / 2); i>=0; i--){\n        maxHeap(array, i, animations);\n    }\n\n    for (let j=array.length-1; j>0; j--){\n        animations.push([0, j]);\n        animations.push([0, j]);\n        animations.push([0, array[0], j, array[j], true]);\n        helperSwap(array, 0, j);\n        array_length--;\n        maxHeap(array, 0, animations)\n    }\n\n    return animations;\n}\n\nfunction maxHeap(array, i, animations){\n    let leftIdx  = 2 * i + 1,\n        rightIdx = 2 * i + 2,\n        max      = i;\n\n    if (leftIdx < array_length && array[leftIdx] > array[max]){\n        max = leftIdx;\n    }\n\n    if (rightIdx < array_length && array[rightIdx] > array[max]){\n        max = rightIdx;\n    }\n\n    animations.push([i, max]);\n    animations.push([i, max]);\n    if (max !== i){\n        animations.push([i, array[i], max, array[max], true]);\n        helperSwap(array, i, max);\n        maxHeap(array, max, animations);\n    } else {\n        animations.push([i, array[i], max, array[max], false]);\n    }\n}\n\n\n\n\n// ############# HELPER METHODS ################\n\nfunction helperSwap(array, idx1, idx2){\n    let tmp = array[idx1];\n    array[idx1] = array[idx2];\n    array[idx2] = tmp;\n}\n\n\n","import React from 'react';\nimport './SortingVisualizer.css'; \nimport {getMergeSortAnimations} from '../SortingAlgorithms/sortingAlgorithms.js';\nimport {getBubbleSortAnimations} from '../SortingAlgorithms/sortingAlgorithms.js';\nimport {getQuickSortAnimations} from '../SortingAlgorithms/sortingAlgorithms.js';\nimport {getHeapSortAnimations} from '../SortingAlgorithms/sortingAlgorithms.js';\nimport {Navbar, Nav, Container} from 'react-bootstrap';\n\n\n// Number of bars appearing in the visualizer\nconst NUMBER_OF_BARS = 350;\n\n// Main color of bars\nconst PRIMARY_COLOR = 'turquoise';\n\n// Color of bars being compared\nconst SECONDARY_COLOR = 'red';\n\n// Animation speed\nconst ANIMATION_SPEED_MS = 1;\n\nexport class SortingVisualizer extends React.Component{\n    constructor(props){\n        super(props);\n\n        this.state = {\n            array: [],\n        };\n    }\n\n    componentDidMount(){\n        this.resetArray();\n    }\n\n    resetArray(){\n        const array = [];\n        for (let i=0; i<NUMBER_OF_BARS; i++){\n            array.push(randomFromInterval(5, 700));\n        }\n        this.setState({array});\n    }\n\n\n    mergeSort(){\n        const animations = getMergeSortAnimations(this.state.array);\n        for (let i=0; i<animations.length; i++) {\n            const arrayBars = document.getElementsByClassName('array-bar');\n            const isColorChange = i % 3 !== 2;\n            if (isColorChange) {\n                const [barOneIdx, barTwoIdx] = animations[i];\n                const barOneStyle = arrayBars[barOneIdx].style;\n                const barTwoStyle = arrayBars[barTwoIdx].style;\n                const color = i % 3 === 0 ? SECONDARY_COLOR : PRIMARY_COLOR;\n                setTimeout(() => {\n                    barOneStyle.backgroundColor = color;\n                    barTwoStyle.backgroundColor = color;\n                }, i * ANIMATION_SPEED_MS);\n            } else {\n            setTimeout(() => {\n                const [barOneIdx, newHeight] = animations[i];\n                const barOneStyle = arrayBars[barOneIdx].style;\n                barOneStyle.height = `${newHeight}px`;\n            }, i * ANIMATION_SPEED_MS);\n            }\n        }\n    }\n\n    bubbleSort(){\n        const animations = getBubbleSortAnimations(this.state.array);\n        for (let i=0; i<animations.length; i++) {\n            const arrayBars = document.getElementsByClassName('array-bar');\n            const isColorChange = i % 3 !== 2;\n            if (isColorChange) {\n                const [barOneIdx, barTwoIdx] = animations[i];\n                const barOneStyle = arrayBars[barOneIdx].style;\n                const barTwoStyle = arrayBars[barTwoIdx].style;\n                const color = i % 3 === 0 ? SECONDARY_COLOR : PRIMARY_COLOR;\n                setTimeout(() => {\n                    barOneStyle.backgroundColor = color;\n                    barTwoStyle.backgroundColor = color;\n                }, i * ANIMATION_SPEED_MS);\n            } else {\n            setTimeout(() => {\n                const [barOneIdx, barOneHeight, barTwoIdx, barTwoHeight, isSwap] = animations[i];\n                if (isSwap){\n                    const barOneStyle = arrayBars[barOneIdx].style;\n                    const barTwoStyle = arrayBars[barTwoIdx].style;\n                    barOneStyle.height = `${barTwoHeight}px`;\n                    barTwoStyle.height = `${barOneHeight}px`;;\n                }\n            }, i * ANIMATION_SPEED_MS);\n            }\n        }\n    }\n\n    quickSort(){\n        const animations = getQuickSortAnimations(this.state.array);\n        for (let i=0; i<animations.length; i++) {\n            const arrayBars = document.getElementsByClassName('array-bar');\n            const isColorChange = i % 3 !== 2;\n            if (isColorChange) {\n                const [barOneIdx, barTwoIdx] = animations[i];\n                const barOneStyle = arrayBars[barOneIdx].style;\n                const barTwoStyle = arrayBars[barTwoIdx].style;\n                const color = i % 3 === 0 ? SECONDARY_COLOR : PRIMARY_COLOR;\n                setTimeout(() => {\n                    barOneStyle.backgroundColor = color;\n                    barTwoStyle.backgroundColor = color;\n                }, i * ANIMATION_SPEED_MS);\n            } else {\n            setTimeout(() => {\n                const [barOneIdx, barOneHeight, barTwoIdx, barTwoHeight, isSwap] = animations[i];\n                if (isSwap){\n                    const barOneStyle = arrayBars[barOneIdx].style;\n                    const barTwoStyle = arrayBars[barTwoIdx].style;\n                    barOneStyle.height = `${barTwoHeight}px`;\n                    barTwoStyle.height = `${barOneHeight}px`;;\n                }\n            }, i * ANIMATION_SPEED_MS);\n            }\n        }\n    }\n\n    heapSort(){\n        const animations = getHeapSortAnimations(this.state.array);\n        for (let i=0; i<animations.length; i++) {\n            const arrayBars = document.getElementsByClassName('array-bar');\n            const isColorChange = i % 3 !== 2;\n            if (isColorChange) {\n                const [barOneIdx, barTwoIdx] = animations[i];\n                const barOneStyle = arrayBars[barOneIdx].style;\n                const barTwoStyle = arrayBars[barTwoIdx].style;\n                const color = i % 3 === 0 ? SECONDARY_COLOR : PRIMARY_COLOR;\n                setTimeout(() => {\n                    barOneStyle.backgroundColor = color;\n                    barTwoStyle.backgroundColor = color;\n                }, i * ANIMATION_SPEED_MS);\n            } else {\n            setTimeout(() => {\n                const [barOneIdx, barOneHeight, barTwoIdx, barTwoHeight, isSwap] = animations[i];\n                if (isSwap){\n                    const barOneStyle = arrayBars[barOneIdx].style;\n                    const barTwoStyle = arrayBars[barTwoIdx].style;\n                    barOneStyle.height = `${barTwoHeight}px`;\n                    barTwoStyle.height = `${barOneHeight}px`;;\n                }\n            }, i * ANIMATION_SPEED_MS);\n            }\n        }\n    }\n\n\n    render(){\n        const {array} = this.state;\n\n        return (\n            <div>\n                <Navbar expand=\"lg\" variant=\"dark\" bg=\"dark\">\n                <Container>\n                  <Navbar.Brand href=\"/\"> Sorting Visualizer </Navbar.Brand>\n                  <Nav className=\"mr-auto\">\n                  <Navbar.Toggle aria-controls=\"responsive-navbar-nav\" />\n                    <Nav.Link onClick={() => this.resetArray()}> Generate New Array </Nav.Link>\n                    <Nav.Link onClick={() => this.quickSort()}> Quick Sort </Nav.Link>\n                    <Nav.Link onClick={() => this.mergeSort()}> Merge Sort </Nav.Link>\n                    <Nav.Link onClick={() => this.heapSort()}> Heap Sort </Nav.Link>\n                    <Nav.Link onClick={() => this.bubbleSort()}> Bubble Sort </Nav.Link>\n                  </Nav>\n                </Container>\n                </Navbar>\n                <div className=\"array-container\" ref={this.myRef}>\n                    {array.map((value, idx) => (\n                        <div\n                            className=\"array-bar\"\n                            key={idx}\n                            style={{\n                                backgroundColor: PRIMARY_COLOR,\n                                height: `${value}px`,\n                        }}></div>\n                    ))} \n                </div>   \n            </div>    \n        )\n    }\n}\n\nfunction randomFromInterval(min, max){\n    // Generates random numbers within a given interval\n    return Math.floor(Math.random() * (max - min + 1) + min);           \n}\n\nexport default SortingVisualizer;\n","import React from 'react';\nimport './App.css';\nimport 'bootstrap/dist/css/bootstrap.min.css';\nimport SortingVisualizer from './SortingVisualizer/SortingVisualizer.jsx';\n\nfunction App() {\n  return (\n    <div className=\"App\">\n      <style>{'body { background-color: #282c34; }'}</style>\n      <SortingVisualizer/>\n    </div>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' }\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();"],"sourceRoot":""}